<?php
/**
 * @file
 * Code for the Artesis Frontend feature.
 */

include_once('artesis_frontend.features.inc');

/**
 * Implements hook_views_default_views_alter().
 *
 * Alter system taxonomy term view to ensure its path doesn't conflict
 * with panel page path.
 */
function artesis_frontend_views_default_views_alter(&$views) {
  if (isset($views['taxonomy_term'])) {
    $views['taxonomy_term']->display['page']->display_options['path'] = 'taxonomy/term/%/views';
  }
}

/**
 * Helper function to get a list of roles that could be assigned to an user
 */
function artesis_user_roles($membersonly = FALSE, $permission = NULL, $account = NULL) {
  $query = db_select('role', 'r');
  $query->addTag('translatable');
  $query->fields('r', array('rid', 'name'));
  $query->orderBy('weight');
  $query->orderBy('name');
  if (!empty($account)) {
    $roles = $account->roles;
    $authenticated = user_role_load(DRUPAL_AUTHENTICATED_RID);
    unset($roles[DRUPAL_AUTHENTICATED_RID]);
    $max_weight = $authenticated->weight;
    foreach ($roles as $rid => $role_name) {
      $role = user_role_load($rid);
      if ($role->weight > $max_weight) {
        $max_weight = $role->weight;
      }
    }
    $query->condition('weight', $max_weight, '<=');
  }
  if (!empty($permission)) {
    $query->innerJoin('role_permission', 'p', 'r.rid = p.rid');
    $query->condition('p.permission', $permission);
  }
  $result = $query->execute();

  $roles = array();
  foreach ($result as $role) {
    switch ($role->rid) {
      // We only translate the built in role names
      case DRUPAL_ANONYMOUS_RID:
        if (!$membersonly) {
          $roles[$role->rid] = t($role->name);
        }
        break;
      case DRUPAL_AUTHENTICATED_RID:
        $roles[$role->rid] = t($role->name);
        break;
      default:
        $roles[$role->rid] = $role->name;
    }
  }

  return $roles;
}

/**
 * Permit users to create only roles that do not exceed theirs
 */
function artesis_frontend_form_alter(&$form, &$forms_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    if (user_access('change user role') && !user_access('administer permissions')) {
      global $user;
      $account = $form['#user'];
      $roles = array_map('check_plain', artesis_user_roles(TRUE, NULL, $user));
      // The disabled checkbox subelement for the 'authenticated user' role
      // must be generated separately and added to the checkboxes element,
      // because of a limitation in Form API not supporting a single disabled
      // checkbox within a set of checkboxes.
      // @todo This should be solved more elegantly. See issue #119038.
      $checkbox_authenticated = array(
        '#type' => 'checkbox',
        '#title' => $roles[DRUPAL_AUTHENTICATED_RID],
        '#default_value' => TRUE,
        '#disabled' => TRUE,
      );
      unset($roles[DRUPAL_AUTHENTICATED_RID]);
      $form['account']['roles'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Roles'),
        '#default_value' => (isset($account->roles) ? array_keys($account->roles) : array()),
        '#options' => $roles,
        DRUPAL_AUTHENTICATED_RID => $checkbox_authenticated,
      );
    }
  }
}

/**
 * Implement permissions for users to change only roles, not permissions
 */
function artesis_frontend_permission() {
  return array(
    'change user role' => array(
      'title' => t('Change user role'),
      'description' => t('Allow a user to change only the roles of an user and not the permissions defined by that role.'),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 * Replaces original IPE "Add new pane" button theming function with a custom set
 * of links available for site editors.
 */
function ding_nodelist_theme_registry_alter(&$registry) {
  $registry['panels_ipe_add_pane_button']['function'] = '_artesis_frontend_panels_ipe_add_pane_button';
}

/**
 * Custom themeing function that replaces standard "Add new pane" button
 * generated by panels IPE. The code is copied from original theme function
 * defined in IPE sub-module of panels module and slightly modified.
 */
function _artesis_frontend_panels_ipe_add_pane_button($vars) {
  $assets_loaded = &drupal_static('ipe_assets_loaded', FALSE);

  $region_id  = $vars['region_id'];
  $renderer   = $vars['renderer'];
  $attributes = array('class' => 'ctools-use-modal', 'style' => 'width: 150px;');

  $plugins    = array(
    'ding_nodelist' => 'ding_nodelist',
    'campaign' => 'campaign',
    'carousel' => 'carousel',
    'ding_item_list' => 'ding_item_list',
  );
  $buttons = array();

  foreach ($plugins as $module => $plugin) {
    $plugin_info = ctools_get_content_type($plugin);
    $buttons[] = l($plugin_info['title'], $renderer->get_url('add-pane', $region_id, $module, $plugin), array('attributes' => $attributes));
  }

  // Blocks are not pure plugins, handle them specially.
  $blocks = array('ding_library_opening_hours-ding_library_opened_today');

  foreach ($blocks as $block) {
    list($module, $delta) = explode('-', $block);
    $block_info = (object) module_invoke($module, 'block', 'view', $delta);
    $buttons[] = l($block_info->title, $renderer->get_url('add-pane', $region_id, 'block', $block), array('attributes' => $attributes));
  }

  $buttons =
    '<div id="ipe-add-' . $region_id . '" class="panels-ipe-newblock ipe-popup">'
    . theme('item_list', array('items' => $buttons))
    . '</div>';

  if (!$assets_loaded) {
    drupal_add_js(drupal_get_path('module', 'artesis_frontend') . '/js/ipe_quick_add.js', 'file');
    drupal_add_css(
      'div.panels-ipe-newblock {z-index: 1}'
      . 'div.ipe-popup {display: none; position: absolute; z-index: 99}'
      . 'div.ipe-popup .item-list {position: absolute}'
      . 'div.ipe-popup .item-list ul li {margin: 0}',
      'inline');
    $assets_loaded = TRUE;
  }

  return '<div class="panels-ipe-newblock panels-ipe-on">' .
          l(t('Add'), NULL, array('attributes' => array('class' => 'ipe-trigger', 'target_region' => $region_id)))
          . '</div>'
          . $buttons;
}
